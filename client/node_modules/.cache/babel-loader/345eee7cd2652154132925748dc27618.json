{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js\";\nimport React, { Component } from 'react'; // import {\n//     Form,\n//     TextField,\n//     SelectField,\n//     SubmitButton\n// } from './../../components/FormElements';\n\nimport SimpleReactValidator from 'simple-react-validator';\nimport { API_URL } from 'config';\nimport axios from 'axios'; // import * as Yup from 'yup';\n\nconst formSchema1 = {\n  form_inputs: [{\n    label: \"Person name\",\n    name: \"person_name\",\n    type: \"text\",\n    value: null,\n    rules: \"required|min:3|max:64\",\n    options: [],\n    default_value: null,\n    multiple: false,\n    readonly: false,\n    placeholder: \"Person name\",\n    info: \"Example value of how to fill the input\"\n  }, {\n    label: \"Country\",\n    name: \"country\",\n    type: \"select\",\n    value: null,\n    rules: \"required|min:2|max:64\",\n    options: [{\n      label: \"Albania\",\n      value: \"albania\"\n    }, {\n      label: \"Italy\",\n      value: \"italy\"\n    }],\n    default_value: \"albania\",\n    multiple: false,\n    readonly: false,\n    placeholder: \"select\",\n    info: \"Example value of how to fill the input\"\n  }]\n};\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      const response = await axios.get(`${API_URL}/formjson`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      this.setState({\n        json: response.data\n      });\n      console.log(\"response.data\", response.data);\n      response.data.form_inputs.map((inp, index) => this.setState({\n        [inp.name]: inp.default_value\n      }));\n    };\n\n    this.handleInputChange = event => {\n      const value = event.target.value;\n      const name = event.target.name; // const type = event.target.type;\n\n      this.setState({\n        [name]: value\n      }); // await this.validateInputs(type, name);\n    };\n\n    this.handleSave = e => {\n      e.preventDefault();\n\n      if (this.validator.allValid()) {\n        alert('You submitted the form and stuff!');\n      } else {\n        this.validator.showMessages();\n        this.forceUpdate();\n      }\n    };\n\n    this.validator = new SimpleReactValidator();\n    this.state = {\n      error: 'Fill the fields',\n      json: null\n    };\n  }\n\n  render() {\n    const {\n      json\n    } = this.state;\n\n    if (json === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [formSchema1.form_inputs.map((inp, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: inp.name,\n            children: inp.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this), inp.type === 'select' ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              type: inp.type,\n              name: inp.name,\n              className: \"form-control\",\n              defaultValue: inp.default_value,\n              onChange: this.handleInputChange,\n              id: inp.name,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: inp.placeholder\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 41\n              }, this), inp.options.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n                label: opt.label,\n                value: opt.value\n              }, opt.label, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 65\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 37\n            }, this), this.validator.message(inp.name, this.state[inp.name], inp.rules)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: inp.type,\n              name: inp.name,\n              defaultValue: inp.default_value,\n              placeholder: inp.placeholder,\n              className: \"form-control\",\n              onChange: this.handleInputChange,\n              id: inp.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 37\n            }, this), this.validator.message(inp.name, this.state[inp.name], inp.rules)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          onClick: event => this.handleSave(event),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js"],"names":["React","Component","SimpleReactValidator","API_URL","axios","formSchema1","form_inputs","label","name","type","value","rules","options","default_value","multiple","readonly","placeholder","info","Home","constructor","props","componentDidMount","response","get","headers","setState","json","data","console","log","map","inp","index","handleInputChange","event","target","handleSave","e","preventDefault","validator","allValid","alert","showMessages","forceUpdate","state","error","render","opt","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import {\n//     Form,\n//     TextField,\n//     SelectField,\n//     SubmitButton\n// } from './../../components/FormElements';\nimport SimpleReactValidator from 'simple-react-validator';\nimport { API_URL } from 'config';\nimport axios from 'axios';\n// import * as Yup from 'yup';\n\nconst formSchema1 = {\n    form_inputs: [\n        {\n            label: \"Person name\",\n            name: \"person_name\",\n            type: \"text\",\n            value: null,\n            rules: \"required|min:3|max:64\",\n            options: [],\n            default_value: null,\n            multiple: false,\n            readonly: false,\n            placeholder: \"Person name\",\n            info: \"Example value of how to fill the input\"\n        },\n        {\n            label: \"Country\",\n            name: \"country\",\n            type: \"select\",\n            value: null,\n            rules: \"required|min:2|max:64\",\n            options: [\n                {\n                    label: \"Albania\",\n                    value: \"albania\"\n                },\n                {\n                    label: \"Italy\",\n                    value: \"italy\"\n                }\n            ],\n            default_value: \"albania\",\n            multiple: false,\n            readonly: false,\n            placeholder: \"select\",\n            info: \"Example value of how to fill the input\"\n        }\n    ]\n}\n\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props)\n        this.validator = new SimpleReactValidator();\n        this.state = {\n            error: 'Fill the fields',\n            json: null,\n        }\n    }\n\n\n    componentDidMount = async () => {\n\n\n    const response = await axios.get(`${API_URL}/formjson`,\n    {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    this.setState({\n        json: response.data\n    })\n \n    console.log(\"response.data\", response.data)\n\n        response.data.form_inputs.map((inp, index) => (\n            this.setState({\n                [inp.name]: inp.default_value\n            })\n        ))\n    }\n\n    handleInputChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        // const type = event.target.type;\n        this.setState({\n            [name]: value\n        });\n        // await this.validateInputs(type, name);\n    }\n\n    // validateInputs = (type, name) => {\n    //     if (this.state[name] !== null) {\n    //         if (this.state[name].length > 3 &&\n    //             this.state[name].length < 64) {\n    //             this.setState({\n    //                 error: ''\n    //             })\n    //             return true;\n    //         }\n    //         else {\n    //             this.setState({\n    //                 error: `${name} should be greater than:3 char and smaller than: 64!`\n    //             })\n    //             return false;\n    //         }\n    //     }\n    //     else {\n    //         this.setState({\n    //             error: `${name} is required!`\n    //         })\n    //         return false;\n    //     }\n    // }\n\n    handleSave = (e) => {\n        e.preventDefault();\n        if (this.validator.allValid()) {\n            alert('You submitted the form and stuff!');\n        } else {\n            this.validator.showMessages();\n            this.forceUpdate();\n        }\n    }\n\n    render() {\n        const { json } = this.state;\n        if(json === null) {\n            return <div>Loading...</div>\n        }\n        return (\n            <div className=\"container\">\n                <form>\n                    {formSchema1.form_inputs.map((inp, index) => (\n                        <div className=\"form-group\" key={index}>\n                            <label htmlFor={inp.name}>{inp.label}</label>\n\n                            {inp.type === 'select' ?\n                                <React.Fragment>\n                                    <select\n                                        type={inp.type}\n                                        name={inp.name}\n                                        className=\"form-control\"\n                                        defaultValue={inp.default_value}\n                                        onChange={this.handleInputChange}\n                                        id={inp.name}>\n                                        <option value=\"\">{inp.placeholder}</option>\n                                        {inp.options.map(opt => <option key={opt.label} label={opt.label} value={opt.value}></option>)}\n\n                                    </select>\n                                    {this.validator.message(inp.name, this.state[inp.name], inp.rules)}\n                                </React.Fragment>\n                                :\n                                <React.Fragment>\n                                    <input\n                                        type={inp.type}\n                                        name={inp.name}\n                                        defaultValue={inp.default_value}\n                                        placeholder={inp.placeholder}\n                                        className=\"form-control\"\n                                        onChange={this.handleInputChange}\n                                        id={inp.name}></input>\n                                    {this.validator.message(inp.name, this.state[inp.name], inp.rules)}\n                                </React.Fragment>\n                            }\n                        </div>\n                    ))}\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary\"\n                        onClick={(event) => this.handleSave(event)}>Save</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n\n"]},"metadata":{},"sourceType":"module"}