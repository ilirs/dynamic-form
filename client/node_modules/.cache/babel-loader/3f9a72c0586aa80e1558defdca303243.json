{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js\";\nimport React, { Component } from 'react'; // import {\n//     Form,\n//     TextField,\n//     SelectField,\n//     SubmitButton\n// } from './../../components/FormElements';\n\nimport SimpleReactValidator from 'simple-react-validator';\nimport { API_URL } from 'config';\nimport axios from 'axios'; // import * as Yup from 'yup';\n// const formSchema1 = {\n//     form_inputs: [\n//         {\n//             label: \"Person name\",\n//             name: \"person_name\",\n//             type: \"text\",\n//             value: null,\n//             rules: \"required|min:3|max:64\",\n//             options: [],\n//             default_value: null,\n//             multiple: false,\n//             readonly: false,\n//             placeholder: \"Person name\",\n//             info: \"Example value of how to fill the input\"\n//         },\n//         {\n//             label: \"Country\",\n//             name: \"country\",\n//             type: \"select\",\n//             value: null,\n//             rules: \"required|min:2|max:64\",\n//             options: [\n//                 {\n//                     label: \"Albania\",\n//                     value: \"albania\"\n//                 },\n//                 {\n//                     label: \"Italy\",\n//                     value: \"italy\"\n//                 }\n//             ],\n//             default_value: \"albania\",\n//             multiple: false,\n//             readonly: false,\n//             placeholder: \"select\",\n//             info: \"Example value of how to fill the input\"\n//         }\n//     ]\n// }\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      const response = await axios.get(`${API_URL}/formjson`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      await this.setState({\n        json: response.data\n      });\n      response.data.map((inp, index) => this.setState({\n        [inp.name]: inp.default_value\n      }));\n    };\n\n    this.handleInputChange = event => {\n      const value = event.target.value;\n      const name = event.target.name; // const type = event.target.type;\n\n      this.setState({\n        [name]: value\n      }); // await this.validateInputs(type, name);\n    };\n\n    this.handleSave = async e => {\n      e.preventDefault();\n      this.setState({\n        disabled: true\n      });\n\n      if (this.validator.allValid()) {\n        const response = await axios.post(`${API_URL}/formjson`, {}, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.status === 200) {\n          this.setState({\n            response_status: response.status,\n            disabled: false\n          });\n        }\n      } else {\n        this.validator.showMessages();\n        this.setState({\n          disabled: false\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.validator = new SimpleReactValidator();\n    this.state = {\n      error: 'Fill the fields',\n      json: null\n    };\n  }\n\n  render() {\n    const {\n      json,\n      disabled,\n      response_status\n    } = this.state;\n\n    if (json === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [json.map((inp, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: inp.name,\n            children: inp.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this), inp.type === 'select' ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              type: inp.type,\n              name: inp.name,\n              disabled: disabled ? true : false,\n              className: \"form-control\",\n              defaultValue: inp.default_value,\n              onChange: this.handleInputChange,\n              id: inp.name,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: inp.placeholder\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 41\n              }, this), inp.options.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n                label: opt.label,\n                value: opt.value\n              }, opt.label, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 65\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 37\n            }, this), this.validator.message(inp.name, this.state[inp.name], inp.rules)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: inp.type,\n              name: inp.name,\n              defaultValue: inp.default_value,\n              placeholder: inp.placeholder,\n              className: \"form-control\",\n              disabled: disabled ? true : false,\n              onChange: this.handleInputChange,\n              id: inp.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 37\n            }, this), this.validator.message(inp.name, this.state[inp.name], inp.rules)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          disabled: disabled ? true : false,\n          onClick: event => this.handleSave(event),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: response_status === 200 ? \"Successfully POST request\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js"],"names":["React","Component","SimpleReactValidator","API_URL","axios","Home","constructor","props","componentDidMount","response","get","headers","setState","json","data","map","inp","index","name","default_value","handleInputChange","event","value","target","handleSave","e","preventDefault","disabled","validator","allValid","post","status","response_status","showMessages","forceUpdate","state","error","render","label","type","placeholder","options","opt","message","rules"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAEzBK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,iBATmB,GASC,YAAY;AAC5B,YAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,GAAEP,OAAQ,WAArB,EACnB;AACIQ,QAAAA,OAAO,EAAE;AACL,oBAAU,kBADL;AAEL,0BAAgB;AAFX;AADb,OADmB,CAAvB;AAQA,YAAM,KAAKC,QAAL,CAAc;AAChBC,QAAAA,IAAI,EAAEJ,QAAQ,CAACK;AADC,OAAd,CAAN;AAIAL,MAAAA,QAAQ,CAACK,IAAT,CAAcC,GAAd,CAAkB,CAACC,GAAD,EAAMC,KAAN,KACd,KAAKL,QAAL,CAAc;AACV,SAACI,GAAG,CAACE,IAAL,GAAYF,GAAG,CAACG;AADN,OAAd,CADJ;AAKH,KA3BkB;;AAAA,SA6BnBC,iBA7BmB,GA6BEC,KAAD,IAAW;AAC3B,YAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACA,YAAMJ,IAAI,GAAGG,KAAK,CAACE,MAAN,CAAaL,IAA1B,CAF2B,CAG3B;;AACA,WAAKN,QAAL,CAAc;AACV,SAACM,IAAD,GAAQI;AADE,OAAd,EAJ2B,CAO3B;AACH,KArCkB;;AAAA,SA+DnBE,UA/DmB,GA+DN,MAAOC,CAAP,IAAa;AACtBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKd,QAAL,CAAc;AACVe,QAAAA,QAAQ,EAAE;AADA,OAAd;;AAGA,UAAI,KAAKC,SAAL,CAAeC,QAAf,EAAJ,EAA+B;AAC3B,cAAMpB,QAAQ,GAAG,MAAML,KAAK,CAAC0B,IAAN,CAAY,GAAE3B,OAAQ,WAAtB,EACnB,EADmB,EAEnB;AACIQ,UAAAA,OAAO,EAAE;AACL,sBAAU,kBADL;AAEL,4BAAgB;AAFX;AADb,SAFmB,CAAvB;;AAQA,YAAIF,QAAQ,CAACsB,MAAT,KAAoB,GAAxB,EAA6B;AACzB,eAAKnB,QAAL,CAAc;AACVoB,YAAAA,eAAe,EAAEvB,QAAQ,CAACsB,MADhB;AAEVJ,YAAAA,QAAQ,EAAE;AAFA,WAAd;AAIH;AAEJ,OAhBD,MAgBO;AACH,aAAKC,SAAL,CAAeK,YAAf;AACA,aAAKrB,QAAL,CAAc;AACVe,UAAAA,QAAQ,EAAE;AADA,SAAd;AAGA,aAAKO,WAAL;AACH;AACJ,KA3FkB;;AAEf,SAAKN,SAAL,GAAiB,IAAI1B,oBAAJ,EAAjB;AACA,SAAKiC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,iBADE;AAETvB,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH;;AAsFDwB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAExB,MAAAA,IAAF;AAAQc,MAAAA,QAAR;AAAkBK,MAAAA;AAAlB,QAAsC,KAAKG,KAAjD;;AACA,QAAItB,IAAI,KAAK,IAAb,EAAmB;AACf,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAA,mBACKA,IAAI,CAACE,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,kBACN;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACI;AAAO,YAAA,OAAO,EAAED,GAAG,CAACE,IAApB;AAAA,sBAA2BF,GAAG,CAACsB;AAA/B;AAAA;AAAA;AAAA;AAAA,kBADJ,EAGKtB,GAAG,CAACuB,IAAJ,KAAa,QAAb,gBACG,QAAC,KAAD,CAAO,QAAP;AAAA,oCACI;AACI,cAAA,IAAI,EAAEvB,GAAG,CAACuB,IADd;AAEI,cAAA,IAAI,EAAEvB,GAAG,CAACE,IAFd;AAGI,cAAA,QAAQ,EAAES,QAAQ,GAAG,IAAH,GAAU,KAHhC;AAII,cAAA,SAAS,EAAC,cAJd;AAKI,cAAA,YAAY,EAAEX,GAAG,CAACG,aALtB;AAMI,cAAA,QAAQ,EAAE,KAAKC,iBANnB;AAOI,cAAA,EAAE,EAAEJ,GAAG,CAACE,IAPZ;AAAA,sCAQI;AAAQ,gBAAA,KAAK,EAAC,EAAd;AAAA,0BAAkBF,GAAG,CAACwB;AAAtB;AAAA;AAAA;AAAA;AAAA,sBARJ,EASKxB,GAAG,CAACyB,OAAJ,CAAY1B,GAAZ,CAAgB2B,GAAG,iBAAI;AAAwB,gBAAA,KAAK,EAAEA,GAAG,CAACJ,KAAnC;AAA0C,gBAAA,KAAK,EAAEI,GAAG,CAACpB;AAArD,iBAAaoB,GAAG,CAACJ,KAAjB;AAAA;AAAA;AAAA;AAAA,sBAAvB,CATL;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAaK,KAAKV,SAAL,CAAee,OAAf,CAAuB3B,GAAG,CAACE,IAA3B,EAAiC,KAAKiB,KAAL,CAAWnB,GAAG,CAACE,IAAf,CAAjC,EAAuDF,GAAG,CAAC4B,KAA3D,CAbL;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,gBAiBG,QAAC,KAAD,CAAO,QAAP;AAAA,oCACI;AACI,cAAA,IAAI,EAAE5B,GAAG,CAACuB,IADd;AAEI,cAAA,IAAI,EAAEvB,GAAG,CAACE,IAFd;AAGI,cAAA,YAAY,EAAEF,GAAG,CAACG,aAHtB;AAII,cAAA,WAAW,EAAEH,GAAG,CAACwB,WAJrB;AAKI,cAAA,SAAS,EAAC,cALd;AAMI,cAAA,QAAQ,EAAEb,QAAQ,GAAG,IAAH,GAAU,KANhC;AAOI,cAAA,QAAQ,EAAE,KAAKP,iBAPnB;AAQI,cAAA,EAAE,EAAEJ,GAAG,CAACE;AARZ;AAAA;AAAA;AAAA;AAAA,oBADJ,EAUK,KAAKU,SAAL,CAAee,OAAf,CAAuB3B,GAAG,CAACE,IAA3B,EAAiC,KAAKiB,KAAL,CAAWnB,GAAG,CAACE,IAAf,CAAjC,EAAuDF,GAAG,CAAC4B,KAA3D,CAVL;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBR;AAAA,WAAiC3B,KAAjC;AAAA;AAAA;AAAA;AAAA,gBADH,CADL,eAqCI;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,SAAS,EAAC,iBAFd;AAGI,UAAA,QAAQ,EAAEU,QAAQ,GAAG,IAAH,GAAU,KAHhC;AAII,UAAA,OAAO,EAAGN,KAAD,IAAW,KAAKG,UAAL,CAAgBH,KAAhB,CAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eA4CI;AAAA,kBACKW,eAAe,KAAK,GAApB,GAA0B,2BAA1B,GAAwD;AAD7D;AAAA;AAAA;AAAA;AAAA,cA5CJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkDH;;AAtJwB;;AAyJ7B,eAAe3B,IAAf","sourcesContent":["import React, { Component } from 'react';\n// import {\n//     Form,\n//     TextField,\n//     SelectField,\n//     SubmitButton\n// } from './../../components/FormElements';\nimport SimpleReactValidator from 'simple-react-validator';\nimport { API_URL } from 'config';\nimport axios from 'axios';\n// import * as Yup from 'yup';\n\n// const formSchema1 = {\n//     form_inputs: [\n//         {\n//             label: \"Person name\",\n//             name: \"person_name\",\n//             type: \"text\",\n//             value: null,\n//             rules: \"required|min:3|max:64\",\n//             options: [],\n//             default_value: null,\n//             multiple: false,\n//             readonly: false,\n//             placeholder: \"Person name\",\n//             info: \"Example value of how to fill the input\"\n//         },\n//         {\n//             label: \"Country\",\n//             name: \"country\",\n//             type: \"select\",\n//             value: null,\n//             rules: \"required|min:2|max:64\",\n//             options: [\n//                 {\n//                     label: \"Albania\",\n//                     value: \"albania\"\n//                 },\n//                 {\n//                     label: \"Italy\",\n//                     value: \"italy\"\n//                 }\n//             ],\n//             default_value: \"albania\",\n//             multiple: false,\n//             readonly: false,\n//             placeholder: \"select\",\n//             info: \"Example value of how to fill the input\"\n//         }\n//     ]\n// }\n\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props)\n        this.validator = new SimpleReactValidator();\n        this.state = {\n            error: 'Fill the fields',\n            json: null,\n        }\n    }\n\n    componentDidMount = async () => {\n        const response = await axios.get(`${API_URL}/formjson`,\n            {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            });\n\n        await this.setState({\n            json: response.data\n        })\n\n        response.data.map((inp, index) => (\n            this.setState({\n                [inp.name]: inp.default_value\n            })\n        ))\n    }\n\n    handleInputChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        // const type = event.target.type;\n        this.setState({\n            [name]: value\n        });\n        // await this.validateInputs(type, name);\n    }\n\n    // validateInputs = (type, name) => {\n    //     if (this.state[name] !== null) {\n    //         if (this.state[name].length > 3 &&\n    //             this.state[name].length < 64) {\n    //             this.setState({\n    //                 error: ''\n    //             })\n    //             return true;\n    //         }\n    //         else {\n    //             this.setState({\n    //                 error: `${name} should be greater than:3 char and smaller than: 64!`\n    //             })\n    //             return false;\n    //         }\n    //     }\n    //     else {\n    //         this.setState({\n    //             error: `${name} is required!`\n    //         })\n    //         return false;\n    //     }\n    // }\n\n    handleSave = async (e) => {\n        e.preventDefault();\n        this.setState({\n            disabled: true\n        })\n        if (this.validator.allValid()) {\n            const response = await axios.post(`${API_URL}/formjson`,\n                {},\n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                });\n            if (response.status === 200) {\n                this.setState({\n                    response_status: response.status,\n                    disabled: false\n                })\n            }\n\n        } else {\n            this.validator.showMessages();\n            this.setState({\n                disabled: false\n            })\n            this.forceUpdate();\n        }\n    }\n\n    render() {\n        const { json, disabled, response_status } = this.state;\n        if (json === null) {\n            return <div>Loading...</div>\n        }\n        return (\n            <div className=\"container\">\n                <form>\n                    {json.map((inp, index) => (\n                        <div className=\"form-group\" key={index}>\n                            <label htmlFor={inp.name}>{inp.label}</label>\n\n                            {inp.type === 'select' ?\n                                <React.Fragment>\n                                    <select\n                                        type={inp.type}\n                                        name={inp.name}\n                                        disabled={disabled ? true : false}\n                                        className=\"form-control\"\n                                        defaultValue={inp.default_value}\n                                        onChange={this.handleInputChange}\n                                        id={inp.name}>\n                                        <option value=\"\">{inp.placeholder}</option>\n                                        {inp.options.map(opt => <option key={opt.label} label={opt.label} value={opt.value}></option>)}\n\n                                    </select>\n                                    {this.validator.message(inp.name, this.state[inp.name], inp.rules)}\n                                </React.Fragment>\n                                :\n                                <React.Fragment>\n                                    <input\n                                        type={inp.type}\n                                        name={inp.name}\n                                        defaultValue={inp.default_value}\n                                        placeholder={inp.placeholder}\n                                        className=\"form-control\"\n                                        disabled={disabled ? true : false}\n                                        onChange={this.handleInputChange}\n                                        id={inp.name}></input>\n                                    {this.validator.message(inp.name, this.state[inp.name], inp.rules)}\n                                </React.Fragment>\n                            }\n                        </div>\n                    ))}\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary\"\n                        disabled={disabled ? true : false}\n                        onClick={(event) => this.handleSave(event)}>Save</button>\n                </form>\n                <div>\n                    {response_status === 200 ? \"Successfully POST request\" : \"\"}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n\n"]},"metadata":{},"sourceType":"module"}