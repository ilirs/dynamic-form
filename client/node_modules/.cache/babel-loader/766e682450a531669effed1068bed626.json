{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Form, TextField, SelectField, SubmitButton } from './../../components/FormElements';\nconst formSchema = {\n  name: {\n    type: \"text\",\n    label: \"Name\",\n    required: true\n  },\n  email: {\n    type: \"email\",\n    label: \"Email\",\n    required: true\n  },\n  role: {\n    type: \"select\",\n    label: \"Role\",\n    required: true,\n    options: [{\n      label: \"Admin\",\n      value: \"admin\"\n    }, {\n      label: \"User\",\n      value: \"user\"\n    }]\n  }\n};\n\nconst Home = () => {\n  _s();\n\n  const [formData, setFormData] = useState({});\n  const [validationSchema, setValidationSchema] = useState({});\n\n  const onSubmit = (values, {\n    setSubmitting,\n    resetForm,\n    setStatus\n  }) => {\n    console.log(values);\n    setSubmitting(false);\n  };\n\n  useEffect(() => {\n    initForm(formSchema);\n  }, []);\n\n  const initForm = formSchema => {\n    let _formData = {};\n    let _validationSchema = {};\n\n    for (var key of Object.keys(formSchema)) {\n      _formData[key] = \"\";\n\n      if (formSchema[key].type === \"text\") {\n        _validationSchema[key] = Yup.string();\n      } else if (formSchema[key].type === \"email\") {\n        _validationSchema[key] = Yup.string().email();\n      } else if (formSchema[key].type === \"select\") {\n        _validationSchema[key] = Yup.string().oneOf(formSchema[key].options.map(o => o.value));\n      }\n\n      if (formSchema[key].required) {\n        _validationSchema[key] = _validationSchema[key].required('Required');\n      }\n    }\n\n    setFormData(_formData);\n    setValidationSchema(Yup.object().shape({ ..._validationSchema\n    }));\n  };\n\n  const getFormElement = (elementName, elementSchema) => {\n    const props = {\n      name: elementName,\n      label: elementSchema.label,\n      options: elementSchema.options\n    };\n\n    if (elementSchema.type === \"text\" || elementSchema.type === \"email\") {\n      return /*#__PURE__*/_jsxDEV(TextField, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (elementSchema.type === \"select\") {\n      return /*#__PURE__*/_jsxDEV(SelectField, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      enableReinitialize: true,\n      initialValues: formData,\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      children: Object.keys(formSchema).map((key, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: getFormElement(key, formSchema[key])\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"V69Ydj/SmCPFul6TUqbZz8hvyxk=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js"],"names":["React","useState","useEffect","Form","TextField","SelectField","SubmitButton","formSchema","name","type","label","required","email","role","options","value","Home","formData","setFormData","validationSchema","setValidationSchema","onSubmit","values","setSubmitting","resetForm","setStatus","console","log","initForm","_formData","_validationSchema","key","Object","keys","Yup","string","oneOf","map","o","object","shape","getFormElement","elementName","elementSchema","props","ind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Form,\n    TextField,\n    SelectField,\n    SubmitButton\n} from './../../components/FormElements';\n\n\nconst formSchema = {\n    name: {\n        type: \"text\",\n        label: \"Name\",\n        required: true\n    },\n    email: {\n        type: \"email\",\n        label: \"Email\",\n        required: true\n    },\n    role: {\n        type: \"select\",\n        label: \"Role\",\n        required: true,\n        options: [\n            {\n                label: \"Admin\",\n                value: \"admin\"\n            },\n            {\n                label: \"User\",\n                value: \"user\"\n            }\n        ]\n    }\n}\n\n\n\nconst Home = () => {\n\n    const [formData, setFormData] = useState({});\n    const [validationSchema, setValidationSchema] = useState({});\n\n    const onSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n        console.log(values);\n        setSubmitting(false);\n    }\n\n\n\n    useEffect(() => {   \n        initForm(formSchema);\n    }, []);\n\n\n    const initForm = (formSchema) => {\n        let _formData = {};\n        let _validationSchema = {};\n\n        for(var key of Object.keys(formSchema)){\n            _formData[key] = \"\";\n\n            if(formSchema[key].type === \"text\"){\n                _validationSchema[key] = Yup.string();\n            }else if(formSchema[key].type === \"email\"){\n                _validationSchema[key] = Yup.string().email()\n            }else if(formSchema[key].type === \"select\"){\n                _validationSchema[key] = Yup.string().oneOf(formSchema[key].options.map(o => o.value));\n            }\n\n            if(formSchema[key].required){\n                _validationSchema[key] = _validationSchema[key].required('Required');\n            }\n        }\n\n        setFormData(_formData);\n        setValidationSchema(Yup.object().shape({ ..._validationSchema }));\n    }\n\n    const getFormElement = (elementName, elementSchema) => {\n        const props = {\n            name: elementName,\n            label: elementSchema.label,\n            options: elementSchema.options\n        };\n\n        if (elementSchema.type === \"text\" || elementSchema.type === \"email\") {\n            return <TextField {...props} />\n        }\n\n        if (elementSchema.type === \"select\") {\n            return <SelectField  {...props} />\n        }\n\n    }\n\n    return (\n        <div className=\"App\">\n        <Form\n            enableReinitialize\n            initialValues={formData}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n        >\n\n            {Object.keys(formSchema).map( (key, ind) => (\n                <div key={key}>\n                    {getFormElement(key, formSchema[key])}\n                </div>\n            ))}\n\n        </Form>\n    </div>\n    )\n\n}\n\nexport default Home;\n\n"]},"metadata":{},"sourceType":"module"}