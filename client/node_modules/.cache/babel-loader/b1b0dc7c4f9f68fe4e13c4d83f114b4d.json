{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Form, TextField, SelectField, SubmitButton } from './../../components/FormElements';\nimport * as Yup from 'yup';\nconst formSchema = {\n  form_inputs: [{\n    label: \"Person name\",\n    name: \"person_name\",\n    type: \"text\",\n    value: null,\n    rules: \"required|min:3|max:64\",\n    options: [],\n    default_value: null,\n    multiple: false,\n    readonly: false,\n    placeholder: \"Person name\",\n    info: \"Example value of how to fill the input\"\n  }]\n};\nconst formSchema1 = {\n  form_inputs: [{\n    label: \"Person name\",\n    name: \"person_name\",\n    type: \"text\",\n    value: null,\n    rules: \"required|min:3|max:64\",\n    options: [],\n    default_value: null,\n    multiple: false,\n    readonly: false,\n    placeholder: \"Person name\",\n    info: \"Example value of how to fill the input\"\n  }, {\n    label: \"Country\",\n    name: \"country\",\n    type: \"select\",\n    value: null,\n    rules: \"required|min:2|max:64\",\n    options: [{\n      \"label\": \"Albania\",\n      \"value\": \"albania\"\n    }, {\n      \"label\": \"Italy\",\n      \"value\": \"italy\"\n    }],\n    default_value: \"albania\",\n    multiple: false,\n    readonly: false,\n    placeholder: \"select\",\n    info: \"Example value of how to fill the input\"\n  }]\n};\n\nconst Home = () => {\n  _s();\n\n  const [formData, setFormData] = useState({});\n  const [validationSchema, setValidationSchema] = useState({});\n\n  const onSubmit = (values, {\n    setSubmitting,\n    resetForm,\n    setStatus\n  }) => {\n    console.log(values);\n    setSubmitting(false);\n  };\n\n  useEffect(() => {\n    initForm(formSchema);\n  }, []);\n\n  const initForm = formSchema => {\n    let _formData = {};\n    let _validationSchema = {};\n    formSchema.form_inputs.map(form => {\n      _formData[key] = \"\";\n      console.log(\"formSchema\", formSchema);\n\n      if (formSchema.type === \"text\") {\n        _validationSchema[key] = Yup.string();\n      }\n\n      if (formSchema[key].required) {\n        _validationSchema[key] = _validationSchema[key].required('Required');\n      }\n    });\n    setFormData(_formData);\n    setValidationSchema(Yup.object().shape({ ..._validationSchema\n    }));\n  };\n\n  const getFormElement = (elementName, elementSchema) => {\n    const props = {\n      name: elementName,\n      label: elementSchema.label,\n      options: elementSchema.options\n    };\n\n    if (elementSchema.type === \"text\" || elementSchema.type === \"email\") {\n      return /*#__PURE__*/_jsxDEV(TextField, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (elementSchema.type === \"select\") {\n      return /*#__PURE__*/_jsxDEV(SelectField, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      enableReinitialize: true,\n      initialValues: formData,\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      children: Object.keys(formSchema).map((key, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: getFormElement(key, formSchema[key])\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"V69Ydj/SmCPFul6TUqbZz8hvyxk=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/ddinformatic/Desktop/atis_task/src/containers/Home/index.js"],"names":["React","useState","useEffect","Form","TextField","SelectField","SubmitButton","Yup","formSchema","form_inputs","label","name","type","value","rules","options","default_value","multiple","readonly","placeholder","info","formSchema1","Home","formData","setFormData","validationSchema","setValidationSchema","onSubmit","values","setSubmitting","resetForm","setStatus","console","log","initForm","_formData","_validationSchema","map","form","key","string","required","object","shape","getFormElement","elementName","elementSchema","props","Object","keys","ind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Form,\n    TextField,\n    SelectField,\n    SubmitButton\n} from './../../components/FormElements';\nimport * as Yup from 'yup';\n\nconst formSchema = {\n    form_inputs: [{\n        label: \"Person name\",\n        name: \"person_name\",\n        type: \"text\",\n        value: null,\n        rules: \"required|min:3|max:64\",\n        options: [],\n        default_value: null,\n        multiple: false,\n        readonly: false,\n        placeholder: \"Person name\",\n        info: \"Example value of how to fill the input\"\n    },\n]\n\n}\n\n\nconst formSchema1 = {\n    form_inputs: [\n        {\n            label: \"Person name\",\n            name: \"person_name\",\n            type: \"text\",\n            value: null,\n            rules: \"required|min:3|max:64\",\n            options: [],\n            default_value: null,\n            multiple: false,\n            readonly: false,\n            placeholder: \"Person name\",\n            info: \"Example value of how to fill the input\"\n        },\n        {\n            label: \"Country\",\n            name: \"country\",\n            type: \"select\",\n            value: null,\n            rules: \"required|min:2|max:64\",\n            options: [\n                {\n                    \"label\": \"Albania\",\n                    \"value\": \"albania\"\n                },\n                {\n                    \"label\": \"Italy\",\n                    \"value\": \"italy\"\n                }\n            ],\n            default_value: \"albania\",\n            multiple: false,\n            readonly: false,\n            placeholder: \"select\",\n            info: \"Example value of how to fill the input\"\n        }\n    ]\n}\n\n\n\nconst Home = () => {\n\n    const [formData, setFormData] = useState({});\n    const [validationSchema, setValidationSchema] = useState({});\n\n    const onSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n        console.log(values);\n        setSubmitting(false);\n    }\n\n\n\n    useEffect(() => {\n        initForm(formSchema);\n    }, []);\n\n\n    const initForm = (formSchema) => {\n        let _formData = {};\n        let _validationSchema = {};\n\n\n        formSchema.form_inputs.map(form => {\n\n        \n            _formData[key] = \"\";\n\n            console.log(\"formSchema\", formSchema)\n            if (formSchema.type === \"text\") {\n                _validationSchema[key] = Yup.string();\n            } \n\n            if (formSchema[key].required) {\n                _validationSchema[key] = _validationSchema[key].required('Required');\n            }\n        })\n\n\n\n        setFormData(_formData);\n        setValidationSchema(Yup.object().shape({ ..._validationSchema }));\n    }\n\n    const getFormElement = (elementName, elementSchema) => {\n        const props = {\n            name: elementName,\n            label: elementSchema.label,\n            options: elementSchema.options\n        };\n\n        if (elementSchema.type === \"text\" || elementSchema.type === \"email\") {\n            return <TextField {...props} />\n        }\n\n        if (elementSchema.type === \"select\") {\n            return <SelectField  {...props} />\n        }\n\n    }\n\n    return (\n        <div className=\"App\">\n            <Form\n                enableReinitialize\n                initialValues={formData}\n                validationSchema={validationSchema}\n                onSubmit={onSubmit}\n            >\n\n                {Object.keys(formSchema).map((key, ind) => (\n                    <div key={key}>\n                        {getFormElement(key, formSchema[key])}\n                    </div>\n                ))}\n\n            </Form>\n        </div>\n    )\n\n}\n\nexport default Home;\n\n"]},"metadata":{},"sourceType":"module"}